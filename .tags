!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
+	init.vim	/^nnoremap + <c-w>5>$/;"	m
-	init.vim	/^nnoremap - <c-w>5<$/;"	m
/	init.vim	/^map \/  <Plug>(incsearch-forward)$/;"	m
<A-j>	init.vim	/^vnoremap <A-j>  :m '<-2<CR>gv=gv$/;"	m
<A-k>	init.vim	/^vnoremap <A-k> :m '>+1<CR>gv=gv$/;"	m
<A-left>	init.vim	/^map <A-left> :tabp<CR>$/;"	m
<A-right>	init.vim	/^map <A-right> :tabn<CR>$/;"	m
<C-h>	init.vim	/^nnoremap <C-h> <C-w>h$/;"	m
<C-j>	init.vim	/^nnoremap <C-j> <C-w>j$/;"	m
<C-k>	init.vim	/^nnoremap <C-k> <C-w>k$/;"	m
<C-l>	init.vim	/^nnoremap <C-l> <C-w>l$/;"	m
<F4>	init.vim	/^nnoremap <F4> :!npm run lint<CR>$/;"	m
<F5>	init.vim	/^nnoremap <F5> :!npm run lint -- --fix<CR>$/;"	m
<Leader>"	init.vim	/^nnoremap <Leader>" :sp<CR>$/;"	m
<Leader>&	init.vim	/^nnoremap <Leader>& :vsp<CR>$/;"	m
<Leader><space>	init.vim	/^nnoremap <Leader><space> :noh<CR>$/;"	m
<Leader>bb	init.vim	/^nnoremap <Leader>bb :Buffers<CR>$/;"	m
<Leader>bh	init.vim	/^nnoremap <Leader>bh :History<CR>$/;"	m
<Leader>bt	init.vim	/^nnoremap <Leader>bt :BTags<CR>$/;"	m
<Leader>e	init.vim	/^nnoremap <Leader>e :lopen<CR>$/;"	m
<Leader>gt	init.vim	/^nnoremap <Leader>gt :sp term:\/\/ctags -R --exclude=node_modules .<CR>$/;"	m
<Leader>he	init.vim	/^nnoremap <Leader>he :ALEFix<CR>$/;"	m
<Leader>q	init.vim	/^nnoremap <Leader>q :lclose<CR>$/;"	m
<Leader>r	init.vim	/^noremap <Leader>r :so %<CR>$/;"	m
<Leader>s	init.vim	/^nnoremap <Leader>s :w<CR>$/;"	m
<c-f>	init.vim	/^map <c-f> :Ag<CR>$/;"	m
<c-p>	init.vim	/^map <c-p> :Files<CR>$/;"	m
<c-s>	init.vim	/^imap <c-s> <C-o>:w<CR>$/;"	m
<c-s>	init.vim	/^map <c-s> :w<CR>$/;"	m
<leader>%	init.vim	/^nnoremap <leader>% :MtaJumpToOtherTag<cr>$/;"	m
<leader>E	init.vim	/^nnoremap <leader>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>$/;"	m
<leader>I	init.vim	/^map <leader>I :FormatCode prettier<CR>$/;"	m
<leader>N	init.vim	/^nnoremap <leader>N :NERDTreeFind<CR>$/;"	m
<leader>P	init.vim	/^nnoremap <leader>P "+P$/;"	m
<leader>P	init.vim	/^vnoremap <leader>P "+P$/;"	m
<leader>d	init.vim	/^nnoremap <leader>d "+d$/;"	m
<leader>d	init.vim	/^vnoremap <leader>d "+d$/;"	m
<leader>e	init.vim	/^nnoremap <leader>e :e $MYVIMRC<CR>  " Abrir el archivo init.vim con <líder> + e$/;"	m
<leader>f	init.vim	/^nnoremap <leader>f :ZoomWinTabToggle<CR>$/;"	m
<leader>h	init.vim	/^nnoremap <leader>h :bprevious<CR>$/;"	m
<leader>i	init.vim	/^map <leader>i gg=G <CR>$/;"	m
<leader>l	init.vim	/^map <leader>l :bnext<CR>$/;"	m
<leader>n	init.vim	/^nnoremap <leader>n :NERDTreeToggle<CR>$/;"	m
<leader>o	init.vim	/^nnoremap <leader>o :new<CR>$/;"	m
<leader>p	init.vim	/^nnoremap <leader>p "+p$/;"	m
<leader>p	init.vim	/^vnoremap <leader>p "+p$/;"	m
<leader>q	init.vim	/^nnoremap <leader>q :bdelete<CR>$/;"	m
<leader>s	init.vim	/^nnoremap <leader>s :w<CR>$/;"	m
<leader>t	init.vim	/^map <leader>t :tabnew<CR>$/;"	m
<leader>vo	init.vim	/^nnoremap <leader>vo :vnew<CR>$/;"	m
<leader>y	init.vim	/^nnoremap <leader>y "+y$/;"	m
<leader>y	init.vim	/^vnoremap <leader>y "+y$/;"	m
<s-tab>	init.vim	/^nnoremap <s-tab> <<$/;"	m
<s-tab>	init.vim	/^xnoremap <s-tab> <gv$/;"	m
<tab>	init.vim	/^nnoremap <tab> >>$/;"	m
<tab>	init.vim	/^xnoremap <tab> >gv$/;"	m
?	init.vim	/^map ?  <Plug>(incsearch-backward)$/;"	m
NERDTreeHighlightFile	init.vim	/^function! NERDTreeHighlightFile(extension, fg)                                  " NERDTrees File/;"	f
bg	.tmux.conf	/^set -g status-style "bg=colour52,none"$/;"	k
deopleteCompleteDoneAu	init.vim	/^augroup deopleteCompleteDoneAu$/;"	a
fg	.tmux.conf	/^set -g message-command-style "fg=colour144,bg=colour237"$/;"	k
fg	.tmux.conf	/^set -g message-style "fg=colour144,bg=colour237"$/;"	k
fg	.tmux.conf	/^set -g pane-active-border-style "fg=colour214"$/;"	k
fg	.tmux.conf	/^set -g pane-border-style "fg=colour136"$/;"	k
fg	.tmux.conf	/^setw -g window-status-activity-style "fg=colour27,bg=colour22,none"$/;"	k
fg	.tmux.conf	/^setw -g window-status-style "fg=colour88,bg=colour15,none"$/;"	k
g:NERDAltDelims_java	init.vim	/^let g:NERDAltDelims_java = 1$/;"	v
g:NERDCommentEmptyLines	init.vim	/^let g:NERDCommentEmptyLines = 1$/;"	v
g:NERDCompactSexyComs	init.vim	/^let g:NERDCompactSexyComs = 1$/;"	v
g:NERDDefaultAlign	init.vim	/^let g:NERDDefaultAlign = 'left'$/;"	v
g:NERDSpaceDelims	init.vim	/^let g:NERDSpaceDelims = 1  " Agregar un espacio después del delimitador del comentario$/;"	v
g:NERDSpaceDelims	init.vim	/^let g:NERDSpaceDelims = 1$/;"	v
g:NERDToggleCheckAllLines	init.vim	/^let g:NERDToggleCheckAllLines = 1$/;"	v
g:NERDTreeChDirMode	init.vim	/^let g:NERDTreeChDirMode = 0                                                     "Always change t/;"	v
g:NERDTreeChDirMode	init.vim	/^let g:NERDTreeChDirMode = 2  " Cambia el directorio actual al nodo padre actual$/;"	v
g:NERDTreeIgnore	init.vim	/^let g:NERDTreeIgnore = [$/;"	v
g:NERDTreeMinimalUI	init.vim	/^let g:NERDTreeMinimalUI = 1                                                     "Disable help te/;"	v
g:NERDTreeShowHidden	init.vim	/^let g:NERDTreeShowHidden = 1                                                    "Show hidden fil/;"	v
g:NERDTrimTrailingWhitespace	init.vim	/^let g:NERDTrimTrailingWhitespace = 1  " Quitar espacios al quitar comentario$/;"	v
g:NERDTrimTrailingWhitespace	init.vim	/^let g:NERDTrimTrailingWhitespace = 1$/;"	v
g:SuperTabDefaultCompletionType	init.vim	/^let g:SuperTabDefaultCompletionType = '<c-n>'$/;"	v
g:WebDevIconsNerdTreeBeforeGlyphPadding	init.vim	/^let g:WebDevIconsNerdTreeBeforeGlyphPadding = ''$/;"	v
g:WebDevIconsNerdTreeGitPluginForceVAlign	init.vim	/^let g:WebDevIconsNerdTreeGitPluginForceVAlign = 0$/;"	v
g:WebDevIconsUnicodeGlyphDoubleWidth	init.vim	/^let g:WebDevIconsUnicodeGlyphDoubleWidth = 1$/;"	v
g:WebDevIcons_conceal_nerdtree_brackets	init.vim	/^let g:WebDevIcons_conceal_nerdtree_brackets = 0                                 "Eliminando el p/;"	v
g:airline#extensions#tabline#enabled	init.vim	/^let g:airline#extensions#tabline#enabled = 1  " Mostrar buffers abiertos (como pestañas)$/;"	v
g:airline#extensions#tabline#fnamemod	init.vim	/^let g:airline#extensions#tabline#fnamemod = ':t'  " Mostrar sólo el nombre del archivo$/;"	v
g:airline_powerline_fonts	init.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:ale_echo_msg_error_str	init.vim	/^let g:ale_echo_msg_error_str = 'E'$/;"	v
g:ale_echo_msg_format	init.vim	/^let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'$/;"	v
g:ale_echo_msg_warning_str	init.vim	/^let g:ale_echo_msg_warning_str = 'W'$/;"	v
g:ale_fixers	init.vim	/^let g:ale_fixers = {'javascript': ['prettier', 'eslint']}                       "Fix eslint erro/;"	v
g:ale_javascript_prettier_options	init.vim	/^let g:ale_javascript_prettier_options = '--print-width 100'                     "Set max width t/;"	v
g:ale_lint_on_save	init.vim	/^let g:ale_lint_on_save = 1                                                      "Lint when savin/;"	v
g:ale_lint_on_text_changed	init.vim	/^let g:ale_lint_on_text_changed = 0$/;"	v
g:ale_linters	init.vim	/^let g:ale_linters = {'javascript': ['eslint']}                                  "Lint js with es/;"	v
g:ale_set_highlights	init.vim	/^let g:ale_set_highlights = 1$/;"	v
g:ale_sign_error	init.vim	/^let g:ale_sign_error = '✖'                                                      "Lint error si/;"	v
g:ale_sign_warning	init.vim	/^let g:ale_sign_warning = '⚠'                                                    "Lint warning /;"	v
g:ale_statusline_format	init.vim	/^let g:ale_statusline_format =[' %d E ', ' %d W ', '']  $/;"	v
g:deoplete#enable_at_startup	init.vim	/^let g:deoplete#enable_at_startup = 1                                            "Enable deoplete/;"	v
g:deoplete#enable_at_startup	init.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#file#enable_buffer_path	init.vim	/^let g:deoplete#file#enable_buffer_path = 1                                      "Autocomplete fi/;"	v
g:deoplete#tag#cache_limit_size	init.vim	/^let g:deoplete#tag#cache_limit_size = 10000000 $/;"	v
g:echodoc_enable_at_startup	init.vim	/^let g:echodoc_enable_at_startup = 1$/;"	v
g:fzf_commands_expect	init.vim	/^let g:fzf_commands_expect = 'alt-enter'$/;"	v
g:fzf_history_dir	init.vim	/^let g:fzf_history_dir = '~\/.local\/share\/fzf-history'$/;"	v
g:gutentags_ctags_tagfile	init.vim	/^let g:gutentags_ctags_tagfile = '.tags'$/;"	v
g:incsearch#auto_nohlsearch	init.vim	/^let g:incsearch#auto_nohlsearch = 1$/;"	v
g:indentLine_bufNameExclude	init.vim	/^let g:indentLine_bufNameExclude = ['NERD_tree.*', 'term:.*']$/;"	v
g:indentLine_fileTypeExclude	init.vim	/^let g:indentLine_fileTypeExclude = ['text', 'sh', 'help', 'terminal']$/;"	v
g:javascript_plugin_flow	init.vim	/^let g:javascript_plugin_flow = 1$/;"	v
g:mapleader	init.vim	/^let g:mapleader = " "$/;"	v
g:mta_filetypes	init.vim	/^let g:mta_filetypes = {$/;"	v
g:syntastic_always_populate_loc_list	init.vim	/^let g:syntastic_always_populate_loc_list = 1$/;"	v
g:syntastic_auto_loc_list	init.vim	/^let g:syntastic_auto_loc_list = 1$/;"	v
g:syntastic_check_on_open	init.vim	/^let g:syntastic_check_on_open = 1$/;"	v
g:syntastic_check_on_wq	init.vim	/^let g:syntastic_check_on_wq = 0$/;"	v
is_vim	.tmux.conf	/^is_vim="ps -o state= -o comm= -t '#{pane_tty}' \\$/;"	k
t	.tmux.conf	/^bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t/;"	k
t	.tmux.conf	/^bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =/;"	k
